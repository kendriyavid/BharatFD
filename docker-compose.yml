# version: "3.8"

# services:
#   redis:
#     image: redis:latest
#     container_name: redis-local
#     restart: always
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     command: ["redis-server"]

# volumes:
#   redis_data:
#     driver: local



# version: "3.8"

# services:
#   backend:
#     build: .
#     container_name: backend-local
#     ports:
#       - "3000:3000"  # Exposes backend on port 3000
#     depends_on:
#       - redis  # Ensures Redis starts first
#     environment:
#       - DATABASE_URI=${DATABASE_URI}  # Use the MongoDB Atlas URI from .env
#       - JWT_SECRET=${JWT_SECRET}
#       - REDIS_HOST=${REDIS_HOST}
#       - REDIS_PORT=${REDIS_PORT}
#     env_file:
#       - .env
#     restart: always
#     volumes:
#       - .:/app  # Mounts the current directory to the container (optional)
  
#   redis:
#     image: redis:latest
#     container_name: redis-local
#     restart: always
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     command: ["redis-server"]

# volumes:
#   redis_data:
#     driver: local



version: "3.8"

services:
  backend:
    build: .  # Dockerfile should be in the root of the project
    container_name: backend-local
    ports:
      - "3000:3000"  # Exposes backend on port 3000
    depends_on:
      - redis  # Ensures Redis starts first
    env_file:
      - .env  # Loads environment variables from .env file
    restart: always
    volumes:
      - .:/app  # Mounts the current directory to the container (optional, for development)
    command: ["npm", "start"]  # Ensure this matches your app's start command if necessary
  
  redis:
    image: redis:latest
    container_name: redis-local
    restart: always
    ports:
      - "6379:6379"  # Exposes Redis on port 6379
    volumes:
      - redis_data:/data  # Persists Redis data
    command: ["redis-server"]  # Ensures Redis is started correctly

volumes:
  redis_data:
    driver: local  # Specifies the volume for Redis persistence
